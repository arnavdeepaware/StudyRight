# Section 1: Insertion Sort Explained!
Ever played cards? Insertion Sort is like arranging a hand! You pick a card and insert it into the right spot in your sorted hand. That's basically it!


# Section 2: Insertion Sort: The Card Game Algorithm
Imagine you're sorting a hand of cards. You pick one up, compare it to the others, and slide it into the right spot. That's Insertion Sort! It's great for small, nearly sorted datasets.


# Section 3: Loop Invariants Demystified (Insertion Sort Edition)
Proving your algorithm works? Use Loop Invariants! For Insertion Sort, the subarray to the left is *always* sorted. Initialization, maintenance, termination - that's the key!


# Section 4: Insertion Sort Correctness: Initialization
First, does our invariant hold at the start? For insertion sort, before the loop starts the subarray A[1..j-1] is technically empty, or A[1..0]. An empty array is by definition sorted, so the invariant holds!


# Section 5: Insertion Sort Correctness: Maintenance
If our invariant is true at the beginning of the loop, is it still true at the *end* of the loop? The insert part of the code preserves the sortedness!
