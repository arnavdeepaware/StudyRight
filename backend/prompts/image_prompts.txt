# What is a Linked List?
A diagram showing three boxes (nodes) in a row. Each box has a number inside (data) and an arrow pointing to the next box. The last box's arrow points to null.


# Singly vs. Doubly vs. Circular
Three diagrams side-by-side: (1) Singly: arrows point in one direction. (2) Doubly: arrows point in both directions. (3) Circular: the last arrow points back to the first.


# Adding Nodes to a Linked List
An animation showing a new node being inserted at the beginning of a linked list, shifting the other nodes over. Then, show a node being added at the end of the list.


# Removing Nodes
A linked list diagram. An animation shows a node being removed from the middle, and the arrow from the previous node now pointing to the node after the removed one.


# Time Complexity: How Fast Are Linked Lists?
A table comparing the time complexity of different linked list operations (insertion at head, tail, deletion, search, traversal). Use color-coding to highlight fast (green) vs. slow (red) operations.


# Linked List Advantages and Disadvantages
A split screen. One side shows the benefits of a linked list (dynamic size, efficient insertion). The other shows drawbacks (no direct access, extra memory).


# Where Are Linked Lists Used?
A montage of icons or short clips representing different use cases: a stack of plates, a queue of people, browser back/forward buttons, memory allocation blocks, a music playlist.
